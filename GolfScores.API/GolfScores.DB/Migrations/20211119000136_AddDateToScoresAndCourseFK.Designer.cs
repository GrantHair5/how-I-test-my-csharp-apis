// <auto-generated />
using System;
using GolfScores.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GolfScores.DB.Migrations
{
    [DbContext(typeof(GolfScoresDbContext))]
    [Migration("20211119000136_AddDateToScoresAndCourseFK")]
    partial class AddDateToScoresAndCourseFK
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GolfScores.DB.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GolfScores.DB.Entities.Golfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Handicap")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Golfers");
                });

            modelBuilder.Entity("GolfScores.DB.Entities.Hole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HandicapIndex")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.Property<int>("Yardage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Holes");
                });

            modelBuilder.Entity("GolfScores.DB.Entities.HoleScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoursePlayedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GolferPlayingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HolePlayedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ScoreOnHole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoursePlayedId");

                    b.HasIndex("GolferPlayingId");

                    b.HasIndex("HolePlayedId");

                    b.ToTable("HoleScores");
                });

            modelBuilder.Entity("GolfScores.DB.Entities.Scores", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTimeOfScore")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GolferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GolferId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("GolfScores.DB.Entities.Hole", b =>
                {
                    b.HasOne("GolfScores.DB.Entities.Course", null)
                        .WithMany("Holes")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("GolfScores.DB.Entities.HoleScore", b =>
                {
                    b.HasOne("GolfScores.DB.Entities.Course", "CoursePlayed")
                        .WithMany()
                        .HasForeignKey("CoursePlayedId");

                    b.HasOne("GolfScores.DB.Entities.Golfer", "GolferPlaying")
                        .WithMany()
                        .HasForeignKey("GolferPlayingId");

                    b.HasOne("GolfScores.DB.Entities.Hole", "HolePlayed")
                        .WithMany()
                        .HasForeignKey("HolePlayedId");

                    b.Navigation("CoursePlayed");

                    b.Navigation("GolferPlaying");

                    b.Navigation("HolePlayed");
                });

            modelBuilder.Entity("GolfScores.DB.Entities.Scores", b =>
                {
                    b.HasOne("GolfScores.DB.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("GolfScores.DB.Entities.Golfer", "Golfer")
                        .WithMany()
                        .HasForeignKey("GolferId");

                    b.Navigation("Course");

                    b.Navigation("Golfer");
                });

            modelBuilder.Entity("GolfScores.DB.Entities.Course", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
